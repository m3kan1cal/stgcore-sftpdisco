service: BaseService

frameworkVersion: ">=1.67.3 <2.0.0"

plugins:
  - serverless-python-requirements
custom:
  codename: STGDisco

  # For compiling 64-bit libraries.
  pythonRequirements:
    dockerizePip: true

  # Reference stacks for cross-stack references.
  iamStack: ${opt:iamStack, 'STGDisco-Lambda-IAMRoles-P-CF'}

  # Usage plan settings.
  usagePlan:
    quota:
      limit: 150000 # Allowed requests.
      offset: 10 # Decrease the limit for this initial time period.
      period: MONTH # Requests/period.
    throttle:
      burstLimit: 200 # Up to requests/second.
      rateLimit: 100 # Requests/second.

  resourcePolicies:
    protected:
      - Effect: Allow
        Principal: '*'
        Action:
          - execute-api:Invoke
        Resource:
          - execute-api:/*/*/*
        Condition:
          StringEquals:
            aws:PrincipalAccount:
              Ref: AWS::AccountID

  # Mandatory tags that will be added to all resources that support tags.
  # https://aws.amazon.com/answers/account-management/aws-tagging-strategies/
  tags:
    ResourceGoup: ${opt:resourceGroup, 'STGDisco-ResourceGroup'}
    Environment: ${opt:environment, 'nonprod'}
    Customer: ${opt:customer, 'STG'}
    Application: ${opt:application, '${self:custom.codename}'}
    ApplicationVersion: ${opt:applicationVersion, '1.0.0'}
    ApplicationRole: ${opt:applicationRole, 'Service'}
    InfrastructureVersion: ${opt:infrastructureVersion, '1.0.0'}
    ProjectCostCenter: ${opt:projectCostCenter, '9493076548'}
    OperatingCostCenter: ${opt:operatingCostCenter, '9493076548'}
    Owner: ${opt:owner, 'fireteamosiris@withstg.com'}
    SecurityContact: ${opt:securityContact, 'fireteamosiris@withstg.com'}
    Confidentiality: ${opt:confidentiality, 'PII/PHI'}
    Compliance: ${opt:compliance, 'HIPAA'}
    AutomateOption: ${opt:automateOption, 'OptIn'}
    AutomateAt: ${opt:automateAt, '9999-12-31 13:37'}

provider:
  name: aws
  runtime: python3.7
  timeout: 10 # Optional, in seconds, default is 6.
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:environment, 'nonprod'}

  # CloudFormation stack and API names.
  stackName: ${opt:stackName, '${self:custom.tags.Application}-${self:service}-SLSLambda-P-CF'}
  apiName: ${opt:apiName, '${self:custom.tags.Application}-${self:service}API'}
  apiGateway:
    description: API Gateway stage deployment for the STG Disco microservices & APIs.

  # Overwrite the default IAM role which is used for all functions.
  role:
    Fn::ImportValue:
      ${self:custom.iamStack}:${self:custom.tags.Environment}:StandardLambdaWithSFTPRole

  # API keys to secure endpoints.
  apiKeys:
    - main:
        - MAIN-${self:custom.tags.Application}-${self:service}APIKey
  usagePlan:
    - main:
      quota:
        limit: ${self:custom.usagePlan.quota.limit}
        offset: ${self:custom.usagePlan.quota.offset}
        period: ${self:custom.usagePlan.quota.period}
      throttle:
        burstLimit: ${self:custom.usagePlan.throttle.burstLimit}
        rateLimit: ${self:custom.usagePlan.throttle.rateLimit}

  # Service wide environment variables.
  environment:
    STAGE: ${self:provider.stage}

  # Endpoint configuration for API Gateway REST API. Default is Edge.
  endpointType: regional

  # Deployment bucket name. Default is generated by the framework if not specified.
  deploymentBucket:
    name: ${opt:account, 'stoic'}-${self:provider.stage}-artifacts
    serverSideEncryption: AES256

  # S3 prefix under which deployed artifacts should be stored.
  deploymentPrefix: cloudformation/disco

  # Mandatory stack tags to tag all resources in Cloudformation stack
  # that are taggable.
  stackTags:
    ResourceGoup: ${self:custom.tags.Application}-ResourceGroup
    Name: ${self:custom.tags.Application}-${self:service}LambdaStack
    Application: ${self:custom.tags.Application}
    ApplicationVersion: ${self:custom.tags.ApplicationVersion}
    ApplicationRole: ${self:custom.tags.ApplicationRole}
    Customer: ${self:custom.tags.Customer}
    Environment: ${self:custom.tags.Environment}
    InfrastructureVersion: ${self:custom.tags.InfrastructureVersion}
    ProjectCostCenter: ${self:custom.tags.ProjectCostCenter}
    OperatingCostCenter: ${self:custom.tags.OperatingCostCenter}
    Owner: ${self:custom.tags.Owner}
    SecurityContact: ${self:custom.tags.SecurityContact}
    Confidentiality: ${self:custom.tags.Confidentiality}
    Compliance: ${self:custom.tags.Compliance}
    AutomateOption: ${self:custom.tags.AutomateOption}
    AutomateAt: ${self:custom.tags.AutomateAt}

package:
  exclude:
    - .git/**
    - .idea/**
    - .vscode/**
    - .pytest_cache/**
    - tests/**

functions:
  SFTPAuthorize:
    handler: src/functions/sftp_authorize.handler
    name: ${self:custom.tags.Application}-${self:service}SFTPAuthorizeLambdaFunc
    resourcePolicy: ${self:custom.resourcePolicies.protected}
    description: Lambda function to provide SFTP custom authentication via password or public
                 SSH key values stored in Secrets Manager backend.
    events:
      - http:
          path: /servers/{serverId}/users/{username}/config
          method: get
          cors: true
          private: false

    tags:
      Name: ${self:custom.tags.Application}-${self:service}SFTPAuthorizeLambdaFunc

  HealthCheck:
    handler: src/functions/health_check.handler
    name: ${self:custom.tags.Application}-${self:service}HealthCheckLambdaFunc
    description: Lambda function to provide basic health check functionality of environmental
                 variables and/or other metrics to show health of system.
    events:
      - http:
          path: /api/health
          method: get
          cors: true
          private: false
    tags:
      Name: ${self:custom.tags.Application}-${self:service}HealthCheckLambdaFunc

resources:
  - Description: >-
      This template deploys an AWS Lambda service with API Gateway for the STG Disco
      suite of services.

  - Outputs:
      SFTPAuthorizeLambdaFuncARN:
        Value:
          Fn::GetAtt: SFTPAuthorizeLambdaFunction.Arn
        Export:
          Name:
            Fn::Join: [":", [Ref: AWS::StackName, "${self:provider.stage}", SFTPAuthorizeLambdaFuncARN]]

      HealthCheckLambdaFuncARN:
        Value:
          Fn::GetAtt: HealthCheckLambdaFunction.Arn
        Export:
          Name:
            Fn::Join: [":", [Ref: AWS::StackName, "${self:provider.stage}", HealthCheckLambdaFuncARN]]

      ServiceEndpointURL:
        Value:
          Fn::Join:
            - ""
            - - "https://"
              - Ref: ApiGatewayRestApi
              - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
        Export:
          Name:
            Fn::Join: [":", [Ref: AWS::StackName, "${self:provider.stage}", ServiceEndpointURL]]

      ServiceEndpointBaseURL:
        Value:
          Fn::Join:
            [
              "",
              ["https://", Ref: ApiGatewayRestApi, ".execute-api.", Ref: AWS::Region, ".amazonaws.com"],
            ]
        Export:
          Name:
            Fn::Join: [":", [Ref: AWS::StackName, "${self:provider.stage}", ServiceEndpointBaseURL]]
